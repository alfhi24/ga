# -*- coding: utf-8 -*-
"""GA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZJMUciP-QT-yk05qeATv2C9ZEqvioV8p
"""

import numpy as np

kromosom = 8
gen = 10
ar_gen = []
krom0 = []
krom1 = []
krom2 = []
krom3 = []
krom4 = []
krom5 = []
krom6 = []
krom7 = []
ar_krom = []

# for i in range (kromosom) :
#   ar_gen.append(np.random.randint(low=-3, high=3))
#   ar_gen.append(np.random.randint(low=-2, high=2))
krom0.append(np.random.randint(2, size=10))
krom0.append(np.random.randint(2, size=10))
krom1.append(np.random.randint(2, size=10))
krom1.append(np.random.randint(2, size=10))
krom2.append(np.random.randint(2, size=10))
krom2.append(np.random.randint(2, size=10))
krom3.append(np.random.randint(2, size=10))
krom3.append(np.random.randint(2, size=10))
krom4.append(np.random.randint(2, size=10))
krom4.append(np.random.randint(2, size=10))
krom5.append(np.random.randint(2, size=10))
krom5.append(np.random.randint(2, size=10))
krom6.append(np.random.randint(2, size=10))
krom6.append(np.random.randint(2, size=10))
krom7.append(np.random.randint(2, size=10))
krom7.append(np.random.randint(2, size=10))

ar_krom.append(krom0)
ar_krom.append(krom1)
ar_krom.append(krom2)
ar_krom.append(krom3)
ar_krom.append(krom4)
ar_krom.append(krom5)
ar_krom.append(krom6)
ar_krom.append(krom7)

for i in range (kromosom) :
  print(ar_krom[i])

# print(ar_krom)
print(ar_krom[0][0])

# Fenotype
def fenotype(kromosom, rb, ra) :
  pembagi = 0
  for i in range (len(kromosom)) :
    pembagi += (1 / np.power(2, i))

  pengali = 0
  for i in range (len(kromosom)) :
    pengali += (kromosom[i] * 1 / np.power(2, i))

  x = rb + ((ra-rb) / pembagi) * pengali
  return x

for i in range (kromosom) :
  print(fenotype(ar_krom[i][0], -3, 2), fenotype(ar_krom[i][1], -2, 2))

# Fitness
def fitness(krom) :
  a = 10
  f = 1 / (((4 - 2 * (fenotype(krom[0], -3, 3)**2) + (fenotype(krom[0], -3, 3)**4) / 3) * (fenotype(krom[0], -3, 3)**2 + (fenotype(krom[0], -3, 3) * fenotype(krom[1], -2, 2)) + (-4 + 4 * (fenotype(krom[1], -2, 2) ** 2)) * (fenotype(krom[1], -2, 2) ** 2))) + a)
  return f

for i in range (kromosom) :
  print(fitness(ar_krom[i]))

# total fitness
def total_fitness() :
  x = 0
  for i in range (kromosom) :
    x += fitness(ar_krom[i])
  return x  
  
print(total_fitness())

# masing masing fitness dibagi total
def rhoulette() :
  rw = []
  for i in range (kromosom) :
    rw.append(fitness(ar_krom[i]) / total_fitness())
  return rw
print(rhoulette())

# kumulatif itu
c = []
x = 0
for i in range (kromosom) :
  x += rhoulette()[i] 
  c.append(x)
  print(c[i])

p = []
i = 0
for j in range (kromosom) :
  r = np.random.uniform()
  ketemu = 'false'
  print(r)
  while (ketemu == 'false') and (i <= 7):
    if (r <= c[0]) :
      p.append(ar_krom[0])
      ketemu = 'true'
    elif (i < 7) and (r > c[i]) and (r <= c[i+1]) :
      p.append(ar_krom[i+1])
      ketemu = 'true'
    else :
      p.append(ar_krom[7])
      ketemu = 'true'
    i += 1
    
for j in range (kromosom) :
  print(p[j])

def crossover (krom, a) :
  crossax1 = []
  crossax2 = []
  crossbx1 = []
  crossbx2 = []
  r = np.random.randint(0,8)
  s = 8 - r
  for j in range (r) :
    crossax1.append(krom[a][0][r])
    crossax2.append(krom[a][1][r])
  while (s <= 9) :
    crossbx1.append(krom[a][0][s])
    crossbx2.append(krom[a][1][s])
    s += 1
  for j in range (r) :
    krom[a][0][j] = crossax1[j]
    krom[a][1][j] = crossax2[j]
  i = 0
  while (s <= 9) :
    krom[a+1][0][s] = crossbx1[i]
    krom[a+1][1][s] = crossbx2[i]
    i += 1
    s += 1
  return krom[a], krom[a+1]
    
crossover(ar_krom, 0)
crossover(ar_krom, 2)
crossover(ar_krom, 4)
crossover(ar_krom, 6)

def mutasi (krom) :
  r = np.random.randint(0,9)
  for i in range (r) :
    if (krom[i] == 1) :
      krom[i] = 0
    else :
      krom[i] = 1
  return r, krom

print(mutasi(ar_krom[0][0]))